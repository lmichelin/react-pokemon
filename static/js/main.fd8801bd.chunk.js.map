{"version":3,"sources":["components/Pokemon.js","components/PokemonsList.js","App.js","serviceWorker.js","index.js","Pokemon.service.js"],"names":["Pokemon","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pokemon_data","getPokemon","react_default","a","createElement","name","src","getImageSrc","alt","getFirstAbility","convertPoundsToKilograms","weight","fetch","idPokemon","json","setState","alert","_context","t0","Component","PokemonsList","idsPokemons","map","components_Pokemon","key","App","className","components_PokemonsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","pokemon","sprites","front_default","abilities","length","ability","kilos","Math","round"],"mappings":"4RA4CeA,cAxCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAc,IAEhBR,EAAKS,aALYT,wEAWjB,OACEU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGT,KAAKI,MAAMC,aAAaK,MAE3BH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,sBAAYZ,KAAKI,MAAMC,cAAeQ,IAAKb,KAAKI,MAAMC,aAAaK,OAC7EH,EAAAC,EAAAC,cAAA,2BACiBF,EAAAC,EAAAC,cAAA,SAAIK,0BAAgBd,KAAKI,MAAMC,gBAEhDE,EAAAC,EAAAC,cAAA,oBACUF,EAAAC,EAAAC,cAAA,SAAIM,mCAAyBf,KAAKI,MAAMC,aAAaW,SAD/D,OARF,gOAkBgCC,MAAM,qCAAuCjB,KAAKJ,MAAMsB,yCAAYC,cAAhGd,SACJL,KAAKoB,SAAS,CAAEf,iEAGhBgB,MAAKC,EAAAC,sHAnCWC,aCgBPC,mLAXX,OACElB,EAAAC,EAAAC,cAAA,WACGT,KAAKJ,MAAM8B,YAAYC,IAAI,SAAAT,GAAS,OACnCX,EAAAC,EAAAC,cAACmB,EAAD,CAASV,UAAWA,EAAWW,IAAKX,cARnBM,aCkBZM,0LAdX,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,UAAQsB,UAAU,cAChBxB,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAACuB,EAAD,CAAcN,YAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,cATpCF,cCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gCE9HnBC,EAAOC,QAAU,CAMhBtC,YANgB,SAMHuC,GACZ,OAAOA,EAAQC,QAAUD,EAAQC,QAAQC,cAAgB,IAG1DvC,gBAVgB,SAUCqC,GAChB,OAAIA,EAAQG,WAAaH,EAAQG,UAAUC,OACnCJ,EAAQG,UAAU,GAAGE,QAAQ9C,KAE9B,MAGRK,yBAjBgB,SAiBU0C,GACzB,OAAgB,MAATA,EAAgB,KAAOC,KAAKC,MAAMF,EAAQ,MAAQ,IAAM","file":"static/js/main.fd8801bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { getImageSrc, getFirstAbility, convertPoundsToKilograms } from \"../Pokemon.service\";\n\nclass Pokemon extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pokemon_data: {}\n    }\n    this.getPokemon()\n  }\n\n  // conditional rendering what are the best practices ?\n\n  render() {\n    return (\n      <div>\n        <h2>\n          {this.state.pokemon_data.name}\n        </h2>\n        <img src={getImageSrc(this.state.pokemon_data)} alt={this.state.pokemon_data.name} />\n        <p>\n          First ability: <b>{getFirstAbility(this.state.pokemon_data)}</b>\n        </p>\n        <p>\n          Weight: <b>{convertPoundsToKilograms(this.state.pokemon_data.weight)}</b> kg\n        </p>\n        ––––––––\n      </div>\n    );\n  }\n\n  async getPokemon() {\n    try {\n      let pokemon_data = await (await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + this.props.idPokemon)).json()\n      this.setState({ pokemon_data })\n\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n}\n\nexport default Pokemon;\n","import React, { Component } from 'react';\nimport Pokemon from \"./Pokemon\";\n\nclass PokemonsList extends Component {\n\n  // inline for rendering ???\n\n  render() {\n    return (\n      <div>\n        {this.props.idsPokemons.map(idPokemon =>\n          <Pokemon idPokemon={idPokemon} key={idPokemon} />\n        )}\n      </div>\n    );\n  }\n\n}\n\nexport default PokemonsList;\n","import React, { Component } from 'react';\nimport PokemonsList from \"./components/PokemonsList\";\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Pokemons list\n          </h1>\n          <PokemonsList idsPokemons={[1,2,3,4,5,6,7,8,9]} />\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// import React from 'react';\n\n// import react here breaks import in ./src/components/Pokemon.js\n// Attempted import error: 'getFirstAbility' is not exported from '../Pokemon.service'.\n\nmodule.exports = {\n\n\t// getImage (pokemon) {\n\t// \treturn pokemon.sprites ? (<img src={pokemon.sprites.front_default} alt={pokemon.name} />) : ''\n\t// },\n\n\tgetImageSrc (pokemon) {\n\t\treturn pokemon.sprites ? pokemon.sprites.front_default : ''\n\t},\n\n\tgetFirstAbility (pokemon) {\n\t\tif (pokemon.abilities && pokemon.abilities.length) {\n\t\t\treturn pokemon.abilities[0].ability.name\n\t\t}\n\t\treturn null\n\t},\n\n\tconvertPoundsToKilograms (kilos) {\n\t\treturn kilos == null ? null : Math.round(kilos / 2.205 * 10) / 10\n\t},\n\n}\n"],"sourceRoot":""}